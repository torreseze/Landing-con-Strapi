#!/usr/bin/env node

/**
 * Script de debug para problemas espec√≠ficos de producci√≥n
 * Ejecutar con: node scripts/debug-production.js
 */

const fs = require('fs');
const path = require('path');

async function debugProduction() {
  console.log("üö® DEBUG DE PRODUCCI√ìN - STRAPI CONNECTION");
  console.log("==========================================");
  
  // Simular el entorno de producci√≥n
  const originalEnv = process.env.NODE_ENV;
  process.env.NODE_ENV = 'production';
  
  console.log("\nüîß CONFIGURACI√ìN DE ENTORNO:");
  console.log("- NODE_ENV:", process.env.NODE_ENV);
  console.log("- Timestamp:", new Date().toISOString());
  
  // Verificar si estamos en un entorno de build vs runtime
  console.log("\nüì¶ CONTEXTO DE EJECUCI√ìN:");
  console.log("- Process title:", process.title);
  console.log("- Process argv:", process.argv.slice(2).join(' '));
  console.log("- Working directory:", process.cwd());
  
  // Leer variables de entorno de diferentes fuentes
  console.log("\nüîç FUENTES DE VARIABLES DE ENTORNO:");
  
  const envSources = [
    { name: '.env.local', path: '.env.local' },
    { name: '.env.production', path: '.env.production' },
    { name: '.env', path: '.env' },
  ];
  
  for (const source of envSources) {
    const fullPath = path.join(process.cwd(), source.path);
    if (fs.existsSync(fullPath)) {
      console.log(`‚úÖ ${source.name} existe`);
      
      try {
        const content = fs.readFileSync(fullPath, 'utf8');
        const lines = content.split('\n').filter(line => 
          line.trim() && !line.startsWith('#')
        );
        
        console.log(`  - L√≠neas de configuraci√≥n: ${lines.length}`);
        
        // Verificar variables espec√≠ficas sin mostrar valores sensibles
        const hasStrapi = lines.some(line => line.includes('STRAPI'));
        console.log(`  - Contiene variables STRAPI: ${hasStrapi ? '‚úÖ' : '‚ùå'}`);
        
      } catch (error) {
        console.log(`  - Error leyendo archivo: ${error.message}`);
      }
    } else {
      console.log(`‚ùå ${source.name} no existe`);
    }
  }
  
  // Verificar variables en process.env
  console.log("\nüåê VARIABLES EN PROCESS.ENV:");
  const strapiUrl = process.env.NEXT_PUBLIC_STRAPI_URL;
  const strapiToken = process.env.STRAPI_API_TOKEN;
  
  console.log("- NEXT_PUBLIC_STRAPI_URL:", strapiUrl ? '‚úÖ Definida' : '‚ùå No definida');
  console.log("- STRAPI_API_TOKEN:", strapiToken ? '‚úÖ Definida' : '‚ùå No definida');
  
  if (strapiUrl) {
    console.log("  - URL length:", strapiUrl.length);
    console.log("  - URL starts with https:", strapiUrl.startsWith('https://'));
    console.log("  - URL preview:", strapiUrl.substring(0, 30) + '...');
  }
  
  if (strapiToken) {
    console.log("  - Token length:", strapiToken.length);
    console.log("  - Token preview:", strapiToken.substring(0, 10) + '...');
  }
  
  // Simular la carga del m√≥dulo como lo har√≠a Next.js
  console.log("\nüìö SIMULANDO CARGA DE M√ìDULOS:");
  
  try {
    // Intentar importar la funci√≥n getLandingPage
    console.log("‚è≥ Importando funci√≥n getLandingPage...");
    
    // En Node.js necesitamos usar require para m√≥dulos CommonJS
    // o dynamic import para m√≥dulos ES
    const strapiPath = path.join(process.cwd(), 'lib', 'strapi.ts');
    
    if (fs.existsSync(strapiPath)) {
      console.log("‚úÖ Archivo lib/strapi.ts encontrado");
      
      // Leer el contenido para verificar la configuraci√≥n
      const content = fs.readFileSync(strapiPath, 'utf8');
      
      // Verificar que las constantes est√©n bien definidas
      const hasStrapi_URL = content.includes('STRAPI_URL');
      const hasStrapi_TOKEN = content.includes('STRAPI_TOKEN');
      
      console.log("- Contiene STRAPI_URL:", hasStrapi_URL ? '‚úÖ' : '‚ùå');
      console.log("- Contiene STRAPI_TOKEN:", hasStrapi_TOKEN ? '‚úÖ' : '‚ùå');
      
    } else {
      console.log("‚ùå Archivo lib/strapi.ts no encontrado");
    }
    
  } catch (error) {
    console.log("‚ùå Error importando m√≥dulos:", error.message);
  }
  
  // Probar la conexi√≥n con timeout m√°s corto para producci√≥n
  console.log("\nüåê PRUEBA DE CONEXI√ìN R√ÅPIDA:");
  
  if (strapiUrl && strapiToken) {
    try {
      console.log("‚è≥ Probando conexi√≥n con timeout de 10s...");
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);
      
      const response = await fetch(`${strapiUrl}/api/landing-pages`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${strapiToken}`,
          'Content-Type': 'application/json',
        },
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      console.log("‚úÖ Conexi√≥n exitosa");
      console.log("- Status:", response.status);
      console.log("- Response time: < 10s");
      
      if (response.ok) {
        const data = await response.json();
        console.log("- Data received:", !!data.data);
        console.log("- Items count:", data.data?.length || 0);
      }
      
    } catch (error) {
      console.log("‚ùå Error de conexi√≥n:");
      
      if (error.name === 'AbortError') {
        console.log("- Timeout: La conexi√≥n tard√≥ m√°s de 10 segundos");
        console.log("üí° En producci√≥n, esto puede causar timeouts de build/render");
      } else {
        console.log("- Error:", error.message);
      }
    }
  } else {
    console.log("‚ö†Ô∏è No se puede probar conexi√≥n - faltan variables de entorno");
  }
  
  // Verificar configuraci√≥n espec√≠fica de Next.js
  console.log("\n‚öôÔ∏è CONFIGURACI√ìN DE NEXT.JS:");
  
  const nextConfigPath = path.join(process.cwd(), 'next.config.js');
  const nextConfigTsPath = path.join(process.cwd(), 'next.config.ts');
  
  let nextConfigExists = false;
  
  if (fs.existsSync(nextConfigPath)) {
    console.log("‚úÖ next.config.js encontrado");
    nextConfigExists = true;
  } else if (fs.existsSync(nextConfigTsPath)) {
    console.log("‚úÖ next.config.ts encontrado");
    nextConfigExists = true;
  } else {
    console.log("‚ö†Ô∏è No se encontr√≥ next.config.js/ts");
  }
  
  if (nextConfigExists) {
    console.log("üí° Verifica que las variables de entorno est√©n en env config");
  }
  
  // Verificar package.json para scripts de build
  console.log("\nüì¶ SCRIPTS DE BUILD:");
  
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  if (fs.existsSync(packageJsonPath)) {
    try {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      
      console.log("‚úÖ package.json encontrado");
      console.log("- Build script:", packageJson.scripts?.build || 'No definido');
      console.log("- Start script:", packageJson.scripts?.start || 'No definido');
      
      // Verificar dependencias relacionadas con Strapi
      const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
      const strapiRelated = Object.keys(deps).filter(dep => 
        dep.includes('strapi') || dep.includes('cms')
      );
      
      if (strapiRelated.length > 0) {
        console.log("- Dependencias Strapi:", strapiRelated.join(', '));
      }
      
    } catch (error) {
      console.log("‚ùå Error leyendo package.json:", error.message);
    }
  }
  
  // Recomendaciones espec√≠ficas para producci√≥n
  console.log("\nüí° RECOMENDACIONES PARA PRODUCCI√ìN:");
  console.log("=====================================");
  
  console.log("\nüîß Variables de entorno:");
  console.log("- Aseg√∫rate de que NEXT_PUBLIC_STRAPI_URL est√© configurada en tu plataforma de deploy");
  console.log("- Verifica que STRAPI_API_TOKEN est√© configurada como variable secreta");
  console.log("- Las variables NEXT_PUBLIC_ son p√∫blicas, las otras son privadas del servidor");
  
  console.log("\nüöÄ Deploy:");
  console.log("- Verifica que Strapi est√© desplegado y accesible desde internet");
  console.log("- Confirma que el token de API tenga los permisos correctos");
  console.log("- Prueba la URL de Strapi manualmente desde un navegador");
  
  console.log("\nüêõ Debug:");
  console.log("- Revisa los logs de build de tu plataforma (Vercel, Netlify, etc.)");
  console.log("- Verifica los logs de runtime/server");
  console.log("- Usa este script en tu servidor de producci√≥n si es posible");
  
  console.log("\nüìã Checklist:");
  console.log("‚ñ° Strapi est√° desplegado y funcionando");
  console.log("‚ñ° Variables de entorno configuradas en la plataforma");
  console.log("‚ñ° Token de API v√°lido y con permisos");
  console.log("‚ñ° Contenido existe en Strapi con el slug correcto");
  console.log("‚ñ° No hay errores de CORS o firewall");
  
  // Restaurar NODE_ENV original
  process.env.NODE_ENV = originalEnv;
  
  console.log("\n‚úÖ Debug de producci√≥n completado");
}

// Ejecutar el debug
debugProduction().catch(console.error); 